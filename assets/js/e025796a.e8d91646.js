"use strict";(self.webpackChunkgx_blog=self.webpackChunkgx_blog||[]).push([[4894],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(t),p=o,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||a;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},61203:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return d}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],c={title:"4\u3001Combine\u548c\u7f51\u7edc\u8bf7\u6c42",tags:["swiftUI","Combine"]},l=void 0,s={unversionedId:"swiftUI-cookbook/\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine/Combine\u548c\u7f51\u7edc\u8bf7\u6c42",id:"swiftUI-cookbook/\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine/Combine\u548c\u7f51\u7edc\u8bf7\u6c42",title:"4\u3001Combine\u548c\u7f51\u7edc\u8bf7\u6c42",description:"\u6211\u4eec\u5c06\u4f7f\u7528OpenWeather\u4e0a\u7684Api\u521b\u5efa\u4e00\u4e2a\u5929\u6c14App\uff0c\u663e\u793a\u6700\u8fd15\u5929\u7684\u5929\u6c14\u3002",source:"@site/docs/swiftUI-cookbook/10-\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine/04-Combine\u548c\u7f51\u7edc\u8bf7\u6c42.md",sourceDirName:"swiftUI-cookbook/10-\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine",slug:"/swiftUI-cookbook/\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine/Combine\u548c\u7f51\u7edc\u8bf7\u6c42",permalink:"/docs/swiftUI-cookbook/\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine/Combine\u548c\u7f51\u7edc\u8bf7\u6c42",draft:!1,editUrl:"https://github.com/xing-ou/GxBlog/docs/swiftUI-cookbook/10-\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine/04-Combine\u548c\u7f51\u7edc\u8bf7\u6c42.md",tags:[{label:"swiftUI",permalink:"/docs/tags/swift-ui"},{label:"Combine",permalink:"/docs/tags/combine"}],version:"current",sidebarPosition:4,frontMatter:{title:"4\u3001Combine\u548c\u7f51\u7edc\u8bf7\u6c42",tags:["swiftUI","Combine"]},sidebar:"swiftUI-cookbook",previous:{title:"3\u3001Combine\u548cForm",permalink:"/docs/swiftUI-cookbook/\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine/Combine\u548cForm"},next:{title:"5\u3001\u8c03\u8bd5Combine",permalink:"/docs/swiftUI-cookbook/\u7b2c\u5341\u7ae0-SwiftUI\u548cCombine/\u8c03\u8bd5Combine"}},u={},d=[{value:"Getting ready",id:"getting-ready",level:2},{value:"How to do it\u2026",id:"how-to-do-it",level:2}],m={toc:d};function p(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u6211\u4eec\u5c06\u4f7f\u7528",(0,a.kt)("strong",{parentName:"p"},"OpenWeather"),"\u4e0a\u7684Api\u521b\u5efa\u4e00\u4e2a\u5929\u6c14App\uff0c\u663e\u793a\u6700\u8fd15\u5929\u7684\u5929\u6c14\u3002"),(0,a.kt)("h2",{id:"getting-ready"},"Getting ready"),(0,a.kt)("p",null,"\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee",(0,a.kt)("strong",{parentName:"p"},"Weather")),(0,a.kt)("p",null,"\u5230OpenWeather\u4e0a\u6ce8\u518c\u4e2a\u8d26\u53f7\uff0c\u62ff\u5230\u4e00\u4e2aApiKey\u3002"),(0,a.kt)("h2",{id:"how-to-do-it"},"How to do it\u2026"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u9996\u5148\uff0c\u521b\u5efaModel")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'struct Weather: Decodable, Identifiable {\n    var id: TimeInterval { time.timeIntervalSince1970 }\n    let time: Date\n    let summary: String\n    let icon: String\n    let temperature: Double\n    \n    enum CodingKeys: String, CodingKey {\n        case time = "dt"\n        case weather = "weather"\n        case summary = "description"\n        case main = "main"\n        case icon = "icon"\n        case temperature = "temp"\n    }\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: CodingKeys.self)\n        time = try container.decode(Date.self, forKey: .time)\n        var weatherContainer = try container.nestedUnkeyedContainer(forKey: .weather)\n        let weather = try weatherContainer.nestedContainer(keyedBy: CodingKeys.self)\n        summary = try weather.decode(String.self, forKey: .summary)\n        icon = try weather.decode(String.self, forKey: .icon)\n        let main = try container.nestedContainer(keyedBy: CodingKeys.self, forKey: .main)\n        temperature = try main.decode(Double.self, forKey: .temperature)\n    }\n}\n\nstruct ForecastWeather: Decodable {\n    let list: [Weather]\n}\n\nextension Double {\n    var formatted: String {\n        String(format: "%.0f", self)\n    }\n}\nextension String {\n    var weatherIcon: String {\n        switch self {\n        case "01d": return "sun.max"\n        case "02d": return "cloud.sun"\n        case "03d": return "cloud"\n        case "04d": return "cloud.fill"\n        case "09d": return "cloud.rain"\n        case "10d": return "cloud.sun.rain"\n        case "11d": return "cloud.bolt"\n        case "13d": return "cloud.snow"\n        case "50d": return "cloud.fog"\n        case "01n": return "moon"\n        case "02n": return "cloud.moon"\n        case "03n": return "cloud"\n        case "04n": return "cloud.fill"\n        case "09n":return "cloud.rain"\n        case "10n": return "cloud.moon.rain"\n        case "11n": return "cloud.bolt"\n        case "13n": return "cloud.snow"\n        case "50n": return "cloud.fog"\n        default: return "icloud.slash"\n        }\n    }\n}\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"\u521b\u5efa\u6211\u4eec\u7684ViewModel")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class WeatherService: ObservableObject {\n    @Published var errorMessage: String = ""\n    @Published var current: Weather?\n    @Published var forecast: [Weather] = []\n\n    private let apiKey = "Your ApiKey"\n    private var cancellableSet: Set<AnyCancellable> = []\n\n    func load(latitude: Float, longitude: Float) {\n        let decoder = JSONDecoder()\n        decoder.dateDecodingStrategy = .secondsSince1970\n        let currentURL = URL(string: "https://api.openweathermap.org/data/2.5/weather?lat=\\(latitude)&lon=\\(longitude)&appid=\\(apiKey)&units=metric")!\n        URLSession\n            .shared\n            .dataTaskPublisher(for: URLRequest(url: currentURL))\n            .map(\\.data)\n            .decode(type: Weather.self, decoder: decoder)\n            .receive(on: RunLoop.main)\n            .sink { completion in\n                switch completion {\n                case .finished: break\n                case let .failure(error):\n                    self.errorMessage = error.localizedDescription\n                }\n            } receiveValue: {\n                self.current = $0\n            }\n            .store(in: &self.cancellableSet)\n\n        let forecastURL = URL(string: "https://api.openweathermap.org/data/2.5/forecast?lat=\\(latitude)&lon=\\(longitude)&appid=\\(apiKey)&units=metric")!\n        URLSession\n            .shared\n            .dataTaskPublisher(for: URLRequest(url: forecastURL))\n            .map(\\.data)\n            .decode(type: ForecastWeather.self, decoder: decoder)\n            .receive(on: RunLoop.main)\n            .sink { completion in\n                switch completion {\n                case .finished: break\n                case let .failure(error):\n                    self.errorMessage = error.localizedDescription\n                }\n            } receiveValue: {\n                self.forecast = $0.list\n            }\n            .store(in: &self.cancellableSet)\n    }\n}\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"\u521b\u5efaView")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'@available(iOS 15.0, *)\nstruct CurrentWeather: View {\n    let current: Weather\n    var body: some View {\n        VStack(spacing: 28) {\n            Text(current.time.formatted(date: .long, time: .standard))\n            HStack {\n                Image(systemName: current.icon.weatherIcon)\n                    .font(.system(size: 98))\n                Text("\\(current.temperature.formatted)\xb0")\n                    .font(.system(size: 46))\n            }\n            Text("\\(current.summary)")\n        }\n    }\n}\n@available(iOS 15.0, *)\nstruct WeatherRow: View {    \n    let weather: Weather\n    var body: some View {\n        HStack() {\n            Image(systemName: weather.icon.weatherIcon)\n                .frame(width: 40)\n                .font(.system(size: 28))\n            VStack(alignment: .leading) {\n                Text(weather.summary)\n                Text(weather.time.formatted(date: .long, time: .standard))\n                    .font(.system(.footnote))\n            }\n            Spacer()\n            Text("\\(weather.temperature.formatted)\xb0 ")\n                .frame(width: 40)\n        }\n        .padding(.horizontal, 16)\n    }\n}\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"\u663e\u793a\u6211\u4eec\u7684View")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"@available(iOS 15.0, *)\nstruct ContentView: View {\n    @StateObject\n    var weatherService = WeatherService()\n    var body: some View {\n        VStack {\n            Text(weatherService.errorMessage)\n                .font(.largeTitle)\n            if let currentWeather = weatherService.current {\n                VStack {\n                    CurrentWeather(current: currentWeather)\n                    List(weatherService.forecast) {\n                        WeatherRow(weather: $0)\n                    }.listStyle(.plain)\n                }\n\n            }\n        }.task {\n            weatherService.load(latitude: 51.5074, longitude: 0.1278)\n        }\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008i3skNgy1gyd9t9sqvdj30ce0oywg0.jpg",alt:"image-20220114161548273"})))}p.isMDXComponent=!0}}]);