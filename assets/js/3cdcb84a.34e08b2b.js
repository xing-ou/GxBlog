"use strict";(self.webpackChunkgx_blog=self.webpackChunkgx_blog||[]).push([[6490],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),p=a,f=m["".concat(c,".").concat(p)]||m[p]||d[p]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58699:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var r=n(83117),a=n(80102),o=(n(67294),n(3905)),i=["components"],l={title:"SwiftUI\u4e13\u8f91073-Combine\u548c\u7f51\u7edc\u8bf7\u6c42",tags:["swiftUI","Combine"]},c=void 0,s={permalink:"/2022/01/15/SwiftUI\u4e13\u8f91-073-Combine\u548c\u7f51\u7edc\u8bf7\u6c42",editUrl:"https://github.com/xing-ou/GxBlog/blog/2022-01-15-SwiftUI\u4e13\u8f91-073-Combine\u548c\u7f51\u7edc\u8bf7\u6c42/index.md",source:"@site/blog/2022-01-15-SwiftUI\u4e13\u8f91-073-Combine\u548c\u7f51\u7edc\u8bf7\u6c42/index.md",title:"SwiftUI\u4e13\u8f91073-Combine\u548c\u7f51\u7edc\u8bf7\u6c42",description:"headerimg",date:"2022-01-15T00:00:00.000Z",formattedDate:"2022\u5e741\u670815\u65e5",tags:[{label:"swiftUI",permalink:"/tags/swift-ui"},{label:"Combine",permalink:"/tags/combine"}],readingTime:2.82,truncated:!0,authors:[],frontMatter:{title:"SwiftUI\u4e13\u8f91073-Combine\u548c\u7f51\u7edc\u8bf7\u6c42",tags:["swiftUI","Combine"]},prevItem:{title:"SwiftUI\u4e13\u8f91074-\u8c03\u8bd5Combine",permalink:"/2022/01/16/SwiftUI\u4e13\u8f91-074-\u8c03\u8bd5Combine"},nextItem:{title:"SwiftUI\u4e13\u8f91072-Combine\u548cForm",permalink:"/2022/01/14/SwiftUI\u4e13\u8f91-072-Combine\u548cForm"}},u={authorsImageUrls:[]},d=[{value:"Getting ready",id:"getting-ready",level:2},{value:"How to do it\u2026",id:"how-to-do-it",level:2}],m={toc:d};function p(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"headerimg",src:n(94216).Z,width:"700",height:"250"}),"\n\u6211\u4eec\u5c06\u4f7f\u7528",(0,o.kt)("strong",{parentName:"p"},"OpenWeather"),"\u4e0a\u7684Api\u521b\u5efa\u4e00\u4e2a\u5929\u6c14App\uff0c\u663e\u793a\u6700\u8fd15\u5929\u7684\u5929\u6c14\u3002"),(0,o.kt)("h2",{id:"getting-ready"},"Getting ready"),(0,o.kt)("p",null,"\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee",(0,o.kt)("strong",{parentName:"p"},"Weather")),(0,o.kt)("p",null,"\u5230OpenWeather\u4e0a\u6ce8\u518c\u4e2a\u8d26\u53f7\uff0c\u62ff\u5230\u4e00\u4e2aApiKey\u3002"),(0,o.kt)("h2",{id:"how-to-do-it"},"How to do it\u2026"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u9996\u5148\uff0c\u521b\u5efaModel")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'struct Weather: Decodable, Identifiable {\n    var id: TimeInterval { time.timeIntervalSince1970 }\n    let time: Date\n    let summary: String\n    let icon: String\n    let temperature: Double\n    \n    enum CodingKeys: String, CodingKey {\n        case time = "dt"\n        case weather = "weather"\n        case summary = "description"\n        case main = "main"\n        case icon = "icon"\n        case temperature = "temp"\n    }\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: CodingKeys.self)\n        time = try container.decode(Date.self, forKey: .time)\n        var weatherContainer = try container.nestedUnkeyedContainer(forKey: .weather)\n        let weather = try weatherContainer.nestedContainer(keyedBy: CodingKeys.self)\n        summary = try weather.decode(String.self, forKey: .summary)\n        icon = try weather.decode(String.self, forKey: .icon)\n        let main = try container.nestedContainer(keyedBy: CodingKeys.self, forKey: .main)\n        temperature = try main.decode(Double.self, forKey: .temperature)\n    }\n}\n\nstruct ForecastWeather: Decodable {\n    let list: [Weather]\n}\n\nextension Double {\n    var formatted: String {\n        String(format: "%.0f", self)\n    }\n}\nextension String {\n    var weatherIcon: String {\n        switch self {\n        case "01d": return "sun.max"\n        case "02d": return "cloud.sun"\n        case "03d": return "cloud"\n        case "04d": return "cloud.fill"\n        case "09d": return "cloud.rain"\n        case "10d": return "cloud.sun.rain"\n        case "11d": return "cloud.bolt"\n        case "13d": return "cloud.snow"\n        case "50d": return "cloud.fog"\n        case "01n": return "moon"\n        case "02n": return "cloud.moon"\n        case "03n": return "cloud"\n        case "04n": return "cloud.fill"\n        case "09n":return "cloud.rain"\n        case "10n": return "cloud.moon.rain"\n        case "11n": return "cloud.bolt"\n        case "13n": return "cloud.snow"\n        case "50n": return "cloud.fog"\n        default: return "icloud.slash"\n        }\n    }\n}\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"\u521b\u5efa\u6211\u4eec\u7684ViewModel")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'class WeatherService: ObservableObject {\n    @Published var errorMessage: String = ""\n    @Published var current: Weather?\n    @Published var forecast: [Weather] = []\n\n    private let apiKey = "Your ApiKey"\n    private var cancellableSet: Set<AnyCancellable> = []\n\n    func load(latitude: Float, longitude: Float) {\n        let decoder = JSONDecoder()\n        decoder.dateDecodingStrategy = .secondsSince1970\n        let currentURL = URL(string: "https://api.openweathermap.org/data/2.5/weather?lat=\\(latitude)&lon=\\(longitude)&appid=\\(apiKey)&units=metric")!\n        URLSession\n            .shared\n            .dataTaskPublisher(for: URLRequest(url: currentURL))\n            .map(\\.data)\n            .decode(type: Weather.self, decoder: decoder)\n            .receive(on: RunLoop.main)\n            .sink { completion in\n                switch completion {\n                case .finished: break\n                case let .failure(error):\n                    self.errorMessage = error.localizedDescription\n                }\n            } receiveValue: {\n                self.current = $0\n            }\n            .store(in: &self.cancellableSet)\n\n        let forecastURL = URL(string: "https://api.openweathermap.org/data/2.5/forecast?lat=\\(latitude)&lon=\\(longitude)&appid=\\(apiKey)&units=metric")!\n        URLSession\n            .shared\n            .dataTaskPublisher(for: URLRequest(url: forecastURL))\n            .map(\\.data)\n            .decode(type: ForecastWeather.self, decoder: decoder)\n            .receive(on: RunLoop.main)\n            .sink { completion in\n                switch completion {\n                case .finished: break\n                case let .failure(error):\n                    self.errorMessage = error.localizedDescription\n                }\n            } receiveValue: {\n                self.forecast = $0.list\n            }\n            .store(in: &self.cancellableSet)\n    }\n}\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"\u521b\u5efaView")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'@available(iOS 15.0, *)\nstruct CurrentWeather: View {\n    let current: Weather\n    var body: some View {\n        VStack(spacing: 28) {\n            Text(current.time.formatted(date: .long, time: .standard))\n            HStack {\n                Image(systemName: current.icon.weatherIcon)\n                    .font(.system(size: 98))\n                Text("\\(current.temperature.formatted)\xb0")\n                    .font(.system(size: 46))\n            }\n            Text("\\(current.summary)")\n        }\n    }\n}\n@available(iOS 15.0, *)\nstruct WeatherRow: View {    \n    let weather: Weather\n    var body: some View {\n        HStack() {\n            Image(systemName: weather.icon.weatherIcon)\n                .frame(width: 40)\n                .font(.system(size: 28))\n            VStack(alignment: .leading) {\n                Text(weather.summary)\n                Text(weather.time.formatted(date: .long, time: .standard))\n                    .font(.system(.footnote))\n            }\n            Spacer()\n            Text("\\(weather.temperature.formatted)\xb0 ")\n                .frame(width: 40)\n        }\n        .padding(.horizontal, 16)\n    }\n}\n')),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"\u663e\u793a\u6211\u4eec\u7684View")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@available(iOS 15.0, *)\nstruct ContentView: View {\n    @StateObject\n    var weatherService = WeatherService()\n    var body: some View {\n        VStack {\n            Text(weatherService.errorMessage)\n                .font(.largeTitle)\n            if let currentWeather = weatherService.current {\n                VStack {\n                    CurrentWeather(current: currentWeather)\n                    List(weatherService.forecast) {\n                        WeatherRow(weather: $0)\n                    }.listStyle(.plain)\n                }\n\n            }\n        }.task {\n            weatherService.load(latitude: 51.5074, longitude: 0.1278)\n        }\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008i3skNgy1gyd9t9sqvdj30ce0oywg0.jpg",alt:"image-20220114161548273"})))}p.isMDXComponent=!0},94216:function(e,t,n){t.Z=n.p+"assets/images/Header-38bdafa729d45a6ea764c52a6adf9ab1.png"}}]);